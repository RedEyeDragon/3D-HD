#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.9
# In conjunction with Tcl version 8.6
#    Feb 22, 2018 01:42:26 PM
import sys
import time
import json
import os
import glob
import serial
import logging
import random
import math
import datetime
import copy
import haptic

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import movementsim_support

global patterns, interface, pdata
global patterns_dicts

def vehicle_pattern():
    duration = 0.050
    heartbeat_gap = 0.050
    a = 5
    while a < 10:
        p = patterns_dicts[a]
        v = haptic.fix_vibrations(p['vibrations'])
        for x in v:
            for m in x:
                interface.vibrate(m, 3, 0, 7)
        time.sleep(duration)
        for x in v:
            for m in x:
                interface.vibrate(m, 3, 0, 0)
        time.sleep(heartbeat_gap)
        for x in v:
            for m in x:
                interface.vibrate(m, 3, 0, 7)
        time.sleep(duration)
        for x in v:
            for m in x:
                interface.vibrate(m, 3, 0, 0)
        time.sleep(0.650)
        a = a + 1    


def chair_pattern():
    p = patterns_dicts[12]
    v = haptic.fix_vibrations(p['vibrations'])
    duration = 0.050
    heartbeat_gap = 0.050
    a = 0
    distance_total = 7
    distances = [4, 3, 2, 2, 1, 1, 0]
    while a < distance_total:
        if distances[a] == 4:
            sleepgap = 1.500
        elif distances[a] == 3:
            sleepgap = 1.500
        elif distances[a] == 2:
            sleepgap = 0.650
        elif distances[a] == 1:
            sleepgap = 0.300
        else:
            sleepgap = 1.000
        for x in v:
            for m in x:
                interface.vibrate(m, 3, 0, 7)
        if distances[a] == 0:
            time.sleep(sleepgap)
            for x in v:
                for m in x:
                    interface.vibrate(m, 3, 0, 0)
        else:
            time.sleep(duration)
            for x in v:
                for m in x:
                    interface.vibrate(m, 3, 0, 0)
            if distances[a] == 4:
                time.sleep(sleepgap)
            else:
                time.sleep(heartbeat_gap)
                for x in v:
                    for m in x:
                        interface.vibrate(m, 3, 0, 7)
                time.sleep(duration)
                for x in v:
                    for m in x:
                        interface.vibrate(m, 3, 0, 0)
                time.sleep(sleepgap)                       
        a = a + 1

def person_pattern():
    duration = 0.050
    heartbeat_gap = 0.050
    a = 0
    distance_total = 8
    distances = [4, 3, 3, 2, 2, 1, 1, 0]
    angles = [2, 2, 3, 3, 3, 3, 4, 4]
    while a < distance_total:
        currentangle = angles[a]
        p = patterns_dicts[currentangle]
        v = haptic.fix_vibrations(p['vibrations'])
        if distances[a] == 4:
            sleepgap = 1.500
        elif distances[a] == 3:
            sleepgap = 1.500
        elif distances[a] == 2:
            sleepgap = 0.650
        elif distances[a] == 1:
            sleepgap = 0.300
        else:
            sleepgap = 1.000

        for x in v:
            for m in x:
                interface.vibrate(m, 3, 0, 7)
        if distances[a] == 0:
            time.sleep(sleepgap)
            for x in v:
                for m in x:
                    interface.vibrate(m, 3, 0, 0)
        else:
            time.sleep(duration)
            for x in v:
                for m in x:
                    interface.vibrate(m, 3, 0, 0)
            if distances[a] == 4:
                time.sleep(sleepgap)
            else:
                time.sleep(heartbeat_gap)
                for x in v:
                    for m in x:
                        interface.vibrate(m, 3, 0, 7)
                time.sleep(duration)
                for x in v:
                    for m in x:
                        interface.vibrate(m, 3, 0, 0)
                time.sleep(sleepgap)                       
        a = a + 1 


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    
    global patterns, interface, pdata
    patterns, interface, pdata = haptic.main()
    global patterns_dicts
    patterns_dicts = pdata['patterns']
    global val, w, root
    root = Tk()
    top = Movement_Simulaton (root)
    movementsim_support.init(root, top)
    root.mainloop()

w = None
def create_Movement_Simulaton(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    top = Movement_Simulaton (w)
    movementsim_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Movement_Simulaton():
    global w
    w.destroy()
    w = None


class Movement_Simulaton:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 

        top.geometry("580x450+650+150")
        top.title("Movement Simulaton")
        top.configure(background="#d9d9d9")



        self.btnVehicle = Button(top)
        self.btnVehicle.place(relx=0.26, rely=0.04, height=114, width=267)
        self.btnVehicle.configure(activebackground="#d9d9d9")
        self.btnVehicle.configure(activeforeground="#000000")
        self.btnVehicle.configure(background="#d9d9d9")
        self.btnVehicle.configure(disabledforeground="#a3a3a3")
        self.btnVehicle.configure(foreground="#000000")
        self.btnVehicle.configure(highlightbackground="#d9d9d9")
        self.btnVehicle.configure(highlightcolor="black")
        self.btnVehicle.configure(pady="0")
        self.btnVehicle.configure(text='''Vehicle''')
        self.btnVehicle.configure(width=267)
        self.btnVehicle.configure(command= lambda: vehicle_pattern())

        self.btnChair = Button(top)
        self.btnChair.place(relx=0.26, rely=0.33, height=114, width=267)
        self.btnChair.configure(activebackground="#d9d9d9")
        self.btnChair.configure(activeforeground="#000000")
        self.btnChair.configure(background="#d9d9d9")
        self.btnChair.configure(disabledforeground="#a3a3a3")
        self.btnChair.configure(foreground="#000000")
        self.btnChair.configure(highlightbackground="#d9d9d9")
        self.btnChair.configure(highlightcolor="black")
        self.btnChair.configure(pady="0")
        self.btnChair.configure(text='''Chair''')
        self.btnChair.configure(width=267)
        self.btnChair.configure(command= lambda: chair_pattern())

        self.btnPerson = Button(top)
        self.btnPerson.place(relx=0.26, rely=0.62, height=114, width=267)
        self.btnPerson.configure(activebackground="#d9d9d9")
        self.btnPerson.configure(activeforeground="#000000")
        self.btnPerson.configure(background="#d9d9d9")
        self.btnPerson.configure(disabledforeground="#a3a3a3")
        self.btnPerson.configure(foreground="#000000")
        self.btnPerson.configure(highlightbackground="#d9d9d9")
        self.btnPerson.configure(highlightcolor="black")
        self.btnPerson.configure(pady="0")
        self.btnPerson.configure(text='''Person''')
        self.btnPerson.configure(width=267)
        self.btnPerson.configure(command= lambda: person_pattern())






if __name__ == '__main__':
    vp_start_gui()



